call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'                                               " neovim 主题
Plug 'vim-airline/vim-airline'                                       " 状态栏
Plug 'vim-airline/vim-airline-themes'                                " 状态栏主题
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }                  " 模糊查询
Plug 'junegunn/fzf.vim' 
Plug 'glepnir/dashboard-nvim'                                        " 启动页面(依赖fzf)
Plug 'neoclide/coc.nvim', {'branch': 'release'}                      " 代码补全
if has('nvim')                                      
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }          " 文件树
else
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'preservim/nerdcommenter'                                       " 代码注释
Plug 'junegunn/vim-easy-align'                                       " 文本对齐
Plug 'tpope/vim-fugitive'                                            " git
Plug 'mbbill/undotree'                                               " 撤销树
Plug 'voldikss/vim-translator'                                       " 翻译工具
Plug 'liuchengxu/vista.vim'                                          " 函数和变量
Plug 'puremourning/vimspector'                                       " 代码调试
Plug 'voldikss/vim-floaterm'                                         " 窗口内悬浮终端
Plug 'akinsho/toggleterm.nvim'                                       " 内置窗口
Plug 'jlanzarotta/bufexplorer'                                       " 列表切换 buffer
Plug 'honza/vim-snippets'                                            " 代码块补全
Plug 'iamcco/markdown-preview.nvim', {'do': 'cd app & yarn install'} " markdown 实时预览
call plug#end()


" ************************************* setting
let mapleader=','

set encoding=utf-8         " 编码
set fenc=utf-8
set number                 " 显示行号
set noswapfile             " 不生成swap文件
set nobackup               " 不备份文件
set relativenumber         " 行都为相对于该行的相对行号
set showmatch              " 括号匹配
set tabstop=4              " 设置Tab长度为4空格
set shiftwidth=4           " 设置自动缩进长度为4空格
set expandtab              " 使用空格代替制表符
set history=1000           " 操作历史记录数
set autoindent             " 继承前一行的缩进方式，适用于多行注释
set nocompatible           " 关闭与vi的兼容模式
set nowrap                 " 不自动折行
set ignorecase             " 搜索时忽略大小写
set cursorline             " 高亮行
set t_Co=256               " 开启256色支持
set cmdheight=1            " 底部命令行高度
set clipboard+=unnamedplus " 打通系统和 vim 剪切板
set ma                     " defx 插件操作文件需要
set guioptions=            " 去掉两边的scrollbar ???
set hidden
set updatetime=300
set shortmess+=c

" 移动窗口快捷键
nnoremap <C-J> <C-W><C-J> 
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" ************************************* morhetz/gruvbox 主题
set background=dark                  " 设置背景为黑色 light / dark
colorscheme gruvbox                  " 设置主题为 gruvbox
let g:gruvbox_contrast_dark = 'soft' " soft / medium / hard
let g:gruvbox_contrast_dark = 'soft'


" ************************************* jlanzarotta/bufexplorer 切换 buffer 列表
let g:bufExplorerDefaultHelp = 0              " 不显示帮助说明
let g:bufExplorerShowRelativePath = 0         " 显示绝对路径
let g:bufExplorerSortBy = 'number'            " 按照 buffer 序号排序
let g:bufExplorerDisableDefaultKeyMapping = 1 " 禁用默认按键

nmap <Leader>bl :BufExplorer<CR> " 打开 buffer 列表


" ************************************* iamcco/markdown-preview.nvim markdown 实时预览
let g:mkdp_brower = 'google-chrome' " 设置默认浏览器

autocmd Filetype markdown nmap <Leader>mp <Plug>MarkdownPreview " 打开预览, 文件类型为 markdown 时快捷键才生效
autocmd Filetype markdown nmap <Leader>ms <Plug>MarkdownPreviewStop " 停止预览
autocmd Filetype markdown nmap <Leader>mh <Plug>MarkdownPreviewToggle " 隐藏预览

autocmd Filetype markdown inoremap <buffer> <silent> ;, <++>
autocmd Filetype markdown inoremap <buffer> <silent> ;f <Esc>/<++><CR>:nohlsearch<CR>c4l
autocmd Filetype markdown nnoremap <buffer> <silent> ;f <Esc>/<++><CR>:nohlsearch<CR>c4l
autocmd Filetype markdown inoremap <buffer> <silent> ;s <Esc>/ <++><CR>:nohlsearch<CR>c5l
autocmd Filetype markdown inoremap <buffer> <silent> ;- ---<Enter><Enter>
autocmd Filetype markdown inoremap <buffer> <silent> ;b **** <++><Esc>F*hi
autocmd Filetype markdown inoremap <buffer> <silent> ;x ~~~~ <++><Esc>F~hi
autocmd Filetype markdown inoremap <buffer> <silent> ;x ** <++><Esc>F*i
autocmd Filetype markdown inoremap <buffer> <silent> ;q `` <++><Esc>F`i
autocmd Filetype markdown inoremap <buffer> <silent> ;c ```<Enter><++><Enter>```<Enter><Enter><++><Esc>4kA
autocmd Filetype markdown inoremap <buffer> <silent> ;g - [ ] <Enter><++><ESC>kA
autocmd Filetype markdown inoremap <buffer> <silent> ;u <u></u><++><Esc>F/hi
autocmd Filetype markdown inoremap <buffer> <silent> ;p ![](<++>) <Enter><++><Esc>kF[a
autocmd Filetype markdown inoremap <buffer> <silent> ;a [](<++>) <++><Esc>F[a
autocmd Filetype markdown inoremap <buffer> <silent> ;1 #<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> <silent> ;2 ##<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> <silent> ;3 ###<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> <silent> ;4 ####<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> <silent> ;t <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>


" ************************************* fzf.vim 模糊查询文件


" ************************************* neoclide/coc.nvim
" coc 启动时自动安装
let g:coc_global_extensions = [ 'coc-pyright', 'coc-java', 'coc-snippets', 'coc-yaml', 'coc-xml', 'coc-rime', 'coc-highlight', 'coc-marketplace', 'coc-markdownlint' ] 
set signcolumn=number " 最左边符号列和序号列合并, 用来减少宽度

" insert 模式下 <TAB> 触发补全
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" 按 <CR> 自动使用第一个补全
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <c-space> coc#refresh() " insert 模式下手动触发补全
nmap <silent> [g <Plug>(coc-diagnostic-prev) " 上一个代码出问题的地方
nmap <silent> ]g <Plug>(coc-diagnostic-next) " 下
nmap <silent> gd <Plug>(coc-definition) " 跳转文件
nmap <silent> gy <Plug>(coc-type-definition) 
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)  " 当前文件内调跳转变量/方法
nmap <leader>rn <Plug>(coc-rename) " 重命名
xmap <leader>cfs <Plug>(coc-format-selected) " 格式化选中代码
nmap <leader>cfs <Plug>(coc-format-selected)
xmap <leader>cf <Plug>(coc-format) " 格式代码
nmap <leader>cf <Plug>(coc-format)

" 显示文档说明
nnoremap <silent> K :call <SID>show_documentation()<CR> 
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight') " 允许高亮


augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)


" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

command! -nargs=0 Format :call CocActionAsync('format') " command 中添加 :Format 命令
" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

nnoremap <silent><nowait> <space>a :<C-u>CocList diagnostics<CR> " 列表展示由问题代码
nnoremap <silent><nowait> <space>c :<C-u>CocList commands<CR> " 展示 coc 所有命令
nnoremap <silent><nowait> <space>o :<C-u>CocList outline<CR> " 当前文件变量和函数列表
nnoremap <silent><nowait> <space>s :<C-u>CocList -I symbols<CR> " Search workspace symbols.
nnoremap <silent><nowait> <space>j :<C-u>CocNext<CR> " Do default action for next item.
nnoremap <silent><nowait> <space>k :<C-u>CocPrev<CR> " Do default action for previous item.
" nnoremap <silent><nowait> <space>e :<C-u>CocList extensions<cr> " 管理插件
" nnoremap <silent><nowait> <space>p :<C-u>CocListResume<CR> " 重新打开最后" 一个coc列表


" ************************************* glepnir/dashboard-nvim
let g:dashboard_default_executive ='fzf' " 这里使用 fzf
nmap <Leader>ss :<C-u>SessionSave<CR>
nmap <Leader>sl :<C-u>SessionLoad<CR>
nnoremap <silent> <Leader>dh :DashboardFindHistory<CR>
nnoremap <silent> <Leader>df :DashboardFindFile<CR>
nnoremap <silent> <Leader>dc :DashboardChangeColorscheme<CR>
nnoremap <silent> <Leader>da :DashboardFindWord<CR>
nnoremap <silent> <Leader>db :DashboardJumpMark<CR>
nnoremap <silent> <Leader>dn :DashboardNewFile<CR>

" 按键说明
let g:dashboard_custom_shortcut={
  \ 'last_session'       : 'Leader d l',
  \ 'find_history'       : 'Leader d h',
  \ 'find_file'          : 'Leader d f',
  \ 'new_file'           : 'Leader d n',
  \ 'change_colorscheme' : 'Leader d c',
  \ 'find_word'          : 'Leader d a',
  \ 'book_marks'         : 'Leader d b',
  \ }

" 设置按键前面的图表, 必须先定义一个变量, 否则报错
let g:dashboard_custom_shortcut_icon = {}
let g:dashboard_custom_shortcut_icon['last_session'] = ''
let g:dashboard_custom_shortcut_icon['find_history'] = ''
let g:dashboard_custom_shortcut_icon['find_file'] = ''
let g:dashboard_custom_shortcut_icon['new_file'] = ''
let g:dashboard_custom_shortcut_icon['change_colorscheme'] = ''
let g:dashboard_custom_shortcut_icon['find_word'] = ''
let g:dashboard_custom_shortcut_icon['book_marks'] = ''

" 开始的图形
let g:dashboard_custom_header = [
   \' ███████████████████████████ ',
   \' ███████▀▀▀░░░░░░░▀▀▀███████ ',
   \' ████▀░░░░░░░░░░░░░░░░░▀████ ',
   \' ███│░░░░░░░░░░░░░░░░░░░│███ ',
   \' ██▌│░░░░░░░░░░░░░░░░░░░│▐██ ',
   \' ██░└┐░░░░░░░░░░░░░░░░░┌┘░██ ',
   \' ██░░└┐░░░░░░░░░░░░░░░┌┘░░██ ',
   \' ██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██ ',
   \' ██▌░│██████▌░░░▐██████│░▐██ ',
   \' ███░│▐███▀▀░░▄░░▀▀███▌│░███ ',
   \' ██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██ ',
   \' ██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██ ',
   \' ████▄─┘██▌░░░░░░░▐██└─▄████ ',
   \' █████░░▐█─┬┬┬┬┬┬┬─█▌░░█████ ',
   \' ████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████ ',
   \' █████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████ ',
   \' ███████▄░░░░░░░░░░░▄███████ ',
   \' ██████████▄▄▄▄▄▄▄██████████ ',
   \ ]


" ************************************* vim-airline/vim-airline 状态栏
let g:airline#extensions#tabline#enabled = 1        " 开启tabline
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1 " 显示buffer编号
let g:bufferline_modified = '+'                     " 缓冲区已修改的符号
let g:airline_theme = 'silver'

" 切换 buffer 快捷键
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab3
nmap <leader>5 <Plug>AirlineSelectTab3
nmap <leader>6 <Plug>AirlineSelectTab3
nmap <leader>7 <Plug>AirlineSelectTab3
nmap <leader>8 <Plug>AirlineSelectTab3
nmap <leader>9 <Plug>AirlineSelectTab3
nmap <leader>0 <Plug>AirlineSelectTab3

" buffer 切换
noremap <Tab> :bn<CR> 
noremap <S-Tab> :bp<CR>
noremap <Leader><Tab> :Bw<CR>
noremap <Leader><S-Tab> :Bw!<CR>
noremap <C-t> :tabnew split<CR>

" ************************************* preservim/nerdcommenter 注释
let g:NERDSpaceDelims = 1 " 注释后面增加 1 个空格
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTrailingWhitespace = 1


" ************************************* junegunn/vim-easy-align 文字对齐
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


" ************************************* mbbill/undotree
nnoremap <Leader>t :UndotreeToggle<CR>


" ************************************* voldikss/vim-translator 词典
let g:translator_window_type = 'popup'      " 弹出窗口中显示。
let g:translator_target_lang = 'zh'         " 目标语言为中文。
let g:translator_source_lang = 'auto'       " 源语言自动识别。
let g:translator_default_engines = ['bing'] " 使用的翻译工具。

nmap <silent> <Leader>w <Plug>TranslateW " 翻译光标下的文本，在窗口中显示翻译内容
vmap <silent> <Leader>w <Plug>TranslateWV "翻译光标下的文本，在窗口中显示翻译内容
" nmap <silent> <Leader>r <Plug>TranslateR " 替换光标下的文本为翻译内容
" vmap <silent> <Leader>r <Plug>TranslateRV " 替换光标下的文本为翻译内容


" ************************************* liuchengxu/vista.vim 文件函数变量
let g:vista_default_executive = 'coc'            " 默认显示 tags 的工具
let g:vista_echo_cursor_strategy ='floating_win' " 启用悬浮窗预览
let g:vista_sidebar_width = 30                   " 侧边栏宽度.
let g:vista_echo_cursor = 1                      " 设置为0，以禁用光标移动时的回显.
let g:vista_cursor_delay = 100                   " 当前游标上显示详细符号信息的时间延迟.
let g:vista_close_on_jump = 0                    " 跳转到一个符号时，自动关闭vista窗口.
let g:vista_stay_on_open = 1                     " 打开vista窗口后移动到它.
let g:vista_blink = [2, 100]                     " 跳转到标记后闪烁光标2次，间隔100ms.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]       " 展示样式

" 状态栏显示函数名称
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
set statusline+=%{NearestMethodOrFunction()}

nmap <silent> <Leader>vl :Vista!!<CR> " 隐藏


" ************************************* puremourning/vimspector
let g:vimspector_enable_mappings = 'HUMAN'  " 按键方案 HUMAN / VISUAL_STUDIO
let g:vimspector_install_gadgets = ['debugpy'] " 安装语言支持, 使用 VimspectorInstall 安装

nmap <C-F11> <Plug>VimspectorStepInto
" nmap <Leader>dq <Plug>VimspectorReset


" ************************************* voldikss/vim-floaterm 内置悬浮终端
let g:floaterm_keymap_new = '<Leader>ft'    " 新建
let g:floaterm_keymap_toggle = '<Leader>fh' " 隐藏
let g:floaterm_keymap_prev = '<Leader>fp'   " 上一个
let g:floaterm_keymap_next = '<Leader>fn'   " 下一个
let g:floaterm_keymap_kill = '<Leader>fc'   " 关闭
let g:floaterm_position = 'center'          " 在中间显示
let g:floaterm_width=0.95
let g:floaterm_height=0.95


" ************************************* akinsho/toggleterm.nvim 内置终端
nmap <silent> <Leader>th :ToggleTerm size=20 direction=horizontal<CR>
nmap <silent> <Leader>tv :ToggleTerm direction=vertical<CR>
nmap <silent> <Leader>tf :ToggleTerm direction=float<CR>
nmap <silent> <Leader>tt :ToggleTerm direction=tab<CR>


" ************************************* Shougo/defx.nvim
call defx#custom#option('_', {
      \ 'winwidth': 30,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'buffer_name': '',
      \ 'toggle': 1,
      \ 'resume': 1
      \ })

nmap <silent> <Leader>e :Defx <cr> " 打开/关闭

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> l defx#do_action('open')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P defx#do_action('preview')
  nnoremap <silent><buffer><expr> o defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
endfunction

